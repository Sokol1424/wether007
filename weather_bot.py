import os
import requests
from telegram import Bot
from telegram.ext import Application, ContextTypes
import datetime
import asyncio
import threading
from apscheduler.schedulers.background import BackgroundScheduler
import time

print("weather_bot.py —Å—Ç–∞—Ä—Ç—É–µ—Ç!")

TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')
LAT = 49.8369
LON = 36.7594
CHAT_ID = '@pogoda_veleten'  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª

def get_wind_direction_ua(deg):
    dirs = [
        '–ø—ñ–≤–Ω—ñ—á', '–ø—ñ–≤–Ω—ñ—á–Ω–∏–π —Å—Ö—ñ–¥', '—Å—Ö—ñ–¥', '–ø—ñ–≤–¥–µ–Ω–Ω–∏–π —Å—Ö—ñ–¥',
        '–ø—ñ–≤–¥–µ–Ω—å', '–ø—ñ–≤–¥–µ–Ω–Ω–∏–π –∑–∞—Ö—ñ–¥', '–∑–∞—Ö—ñ–¥', '–ø—ñ–≤–Ω—ñ—á–Ω–∏–π –∑–∞—Ö—ñ–¥'
    ]
    ix = int((deg + 22.5) // 45) % 8
    return dirs[ix]

UA_WEEKDAYS = {
    0: '–ø–Ω', 1: '–≤—Ç', 2: '—Å—Ä', 3: '—á—Ç', 4: '–ø—Ç', 5: '—Å–±', 6: '–Ω–¥'
}

UA_MONTHS = {
    1: '—Å—ñ—á–Ω—è', 2: '–ª—é—Ç–æ–≥–æ', 3: '–±–µ—Ä–µ–∑–Ω—è', 4: '–∫–≤—ñ—Ç–Ω—è', 5: '—Ç—Ä–∞–≤–Ω—è', 6: '—á–µ—Ä–≤–Ω—è',
    7: '–ª–∏–ø–Ω—è', 8: '—Å–µ—Ä–ø–Ω—è', 9: '–≤–µ—Ä–µ—Å–Ω—è', 10: '–∂–æ–≤—Ç–Ω—è', 11: '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', 12: '–≥—Ä—É–¥–Ω—è'
}

UA_WEATHER = {
    '—è—Å–Ω–æ': '‚òÄÔ∏è –Ø—Å–Ω–æ',
    '—á–∏—Å—Ç–µ –Ω–µ–±–æ': '‚òÄÔ∏è –ß–∏—Å—Ç–µ –Ω–µ–±–æ',
    '—Ö–º–∞—Ä–Ω–æ': '‚òÅÔ∏è –•–º–∞—Ä–Ω–æ',
    '–ø–æ—Ö–º—É—Ä–æ': '‚òÅÔ∏è –ü–æ—Ö–º—É—Ä–æ',
    '–º—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å': 'üå§üå• –ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å',
    '—Ä–≤–∞–Ω—ñ —Ö–º–∞—Ä–∏': 'üå• –†–≤–∞–Ω—ñ —Ö–º–∞—Ä–∏',
    '—É—Ä–∏–≤—á–∞—Å—Ç—ñ —Ö–º–∞—Ä–∏': '‚õÖ –£—Ä–∏–≤—á–∞—Å—Ç—ñ —Ö–º–∞—Ä–∏',
    '–¥–æ—â': 'üåß –î–æ—â',
    '–ª–µ–≥–∫–∏–π –¥–æ—â': 'üå¶ –õ–µ–≥–∫–∏–π –¥–æ—â',
    '–Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â': 'üå¶üåß –ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â',
    '–≥—Ä–æ–∑–∞': 'üå© –ì—Ä–æ–∑–∞',
    '—Å–Ω—ñ–≥': '‚ùÑÔ∏è –°–Ω—ñ–≥',
    '—Ç—É–º–∞–Ω': 'üò∂‚Äçüå´Ô∏è –¢—É–º–∞–Ω',
}

def get_weather_forecast():
    url = f'https://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&appid={WEATHER_API_KEY}&units=metric&lang=ua'
    response = requests.get(url, timeout=10)
    data = response.json()
    days = {}
    rain_keywords = ['–¥–æ—â', '–≥—Ä–æ–∑–∞']
    for item in data['list']:
        dt = datetime.datetime.fromtimestamp(item['dt'])
        day_key = dt.date()
        weather_desc = item['weather'][0]['description'].lower()
        ua_desc = UA_WEATHER.get(weather_desc, weather_desc)
        entry = {
            'temp': item['main']['temp'],
            'wind_speed': item['wind']['speed'],
            'wind_dir': get_wind_direction_ua(item['wind']['deg']),
            'humidity': item['main']['humidity'],
            'description': ua_desc,
            'desc_raw': weather_desc,  # –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ
            'time': dt.strftime('%H:%M'),
            'hour': dt.hour,
        }
        if day_key not in days:
            days[day_key] = {
                'date': dt,
                'night': None,
                'day': None,
                'rain_night': [],
                'rain_day': []
            }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—á–Ω–æ–π –∏ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–∫–∞–∫ –±—ã–ª–æ)
        if dt.hour == 3:
            days[day_key]['night'] = entry
        if dt.hour == 15:
            days[day_key]['day'] = entry
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–æ–∂–¥—è
        is_rain = any(k in weather_desc for k in rain_keywords)
        # –ù–æ—á—å: 20:00‚Äì23:00 –∏ 0:00‚Äì5:00 (—Ç–µ–∫—É—â–∞—è –Ω–æ—á—å ‚Äî —Å 20:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –¥–æ 6:00 —Ç–µ–∫—É—â–µ–≥–æ)
        # –î–µ–Ω—å: 6:00‚Äì19:00 (06:00 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, 20:00 –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        if 6 <= dt.hour < 20:
            if is_rain:
                days[day_key]['rain_day'].append(dt)
        else:
            # –î–ª—è –Ω–æ—á–∏: –µ—Å–ª–∏ 0:00‚Äì5:00 ‚Äî —ç—Ç–æ –Ω–æ—á—å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ 20:00‚Äì23:00 ‚Äî —ç—Ç–æ –Ω–æ—á—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            if is_rain:
                if dt.hour < 6:
                    days[day_key]['rain_night'].append(dt)
                else:
                    # 20:00‚Äì23:00 ‚Äî —ç—Ç–æ –Ω–æ—á—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    next_day = day_key + datetime.timedelta(days=1)
                    if next_day not in days:
                        days[next_day] = {
                            'date': dt + datetime.timedelta(days=1),
                            'night': None,
                            'day': None,
                            'rain_night': [],
                            'rain_day': []
                        }
                    days[next_day]['rain_night'].append(dt)
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 5 –¥–Ω–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ—á–∏/–¥–Ω—è
    all_dates = sorted([datetime.date.today() + datetime.timedelta(days=i) for i in range(5)])
    forecast = []
    for d in all_dates:
        day = days.get(d, {'date': datetime.datetime.combine(d, datetime.time()), 'night': None, 'day': None, 'rain_night': [], 'rain_day': []})
        forecast.append(day)
    return forecast

async def send_weather(context: ContextTypes.DEFAULT_TYPE):
    print("[send_weather] –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É")
    forecast = get_weather_forecast()
    msg = 'üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —É –í–µ–ª–µ—Ç–µ–Ω—ñ –Ω–∞ 5 –¥–Ω—ñ–≤\n\n'
    for i, day in enumerate(forecast):
        dt = day['date']
        weekday = UA_WEEKDAYS[dt.weekday()]
        month_ua = UA_MONTHS[dt.month]
        msg += f"üìÖ {dt.day} {month_ua} ({weekday})\n"
        night = day['night']
        if night:
            night_str = f"{night['temp']:.1f}¬∞C | {night['description']} | üí® {night['wind_speed']} –º/—Å | üíß {night['humidity']}%"
            msg += f"üåô –ù—ñ—á: {night_str}\n"
        else:
            msg += "üåô –ù—ñ—á: ‚Äì\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–æ–∂–¥—è –Ω–æ—á—å—é
        if day.get('rain_night'):
            rain_periods = []
            rain_times = [dt.strftime('%H:%M') for dt in sorted(day['rain_night'])]
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            from itertools import groupby
            from operator import itemgetter
            hours = [int(t[:2]) for t in rain_times]
            groups = []
            for k, g in groupby(enumerate(hours), lambda x: x[0] - x[1]):
                group = list(map(itemgetter(1), g))
                groups.append(group)
            for group in groups:
                if group:
                    start = f"{group[0]:02d}:00"
                    end = f"{(group[-1]+3)%24:02d}:00"  # 3 —á–∞—Å–∞ —à–∞–≥
                    rain_periods.append(f"üåß –ô–º–æ–≤—ñ—Ä–Ω–∏–π –¥–æ—â –∑ {start} –ø–æ {end}")
            for period in rain_periods:
                msg += period + "\n"
        daypart = day['day']
        if daypart:
            day_str = f"{daypart['temp']:.1f}¬∞C | {daypart['description']} | üí® {daypart['wind_speed']} –º/—Å | üíß {daypart['humidity']}%"
            msg += f"‚òÄÔ∏è –î–µ–Ω—å: {day_str}\n"
        else:
            msg += "‚òÄÔ∏è –î–µ–Ω—å: ‚Äì\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–æ–∂–¥—è –¥–Ω—ë–º
        if day.get('rain_day'):
            rain_periods = []
            rain_times = [dt.strftime('%H:%M') for dt in sorted(day['rain_day'])]
            from itertools import groupby
            from operator import itemgetter
            hours = [int(t[:2]) for t in rain_times]
            groups = []
            for k, g in groupby(enumerate(hours), lambda x: x[0] - x[1]):
                group = list(map(itemgetter(1), g))
                groups.append(group)
            for group in groups:
                if group:
                    start = f"{group[0]:02d}:00"
                    end = f"{(group[-1]+3)%24:02d}:00"
                    rain_periods.append(f"üåß –ô–º–æ–≤—ñ—Ä–Ω–∏–π –¥–æ—â –∑ {start} –ø–æ {end}")
            for period in rain_periods:
                msg += period + "\n"
        if i < len(forecast) - 1:
            msg += "\n"  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–Ω—è–º–∏
    msg += "\nüéØ –í–µ–ª–µ—Ç–µ–Ω—å—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ \n‚òÅÔ∏è‚òÄÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ–¥–Ω—è ‚Äî –±—É–¥—å —É –∫—É—Ä—Å—ñ üå¶\n#–ø–æ–≥–æ–¥–∞ #–≤–µ–ª–µ—Ç–µ–Ω—å"
    try:
        print("[send_weather] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram...")
        await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
        print("[send_weather] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"[send_weather] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def run_send_weather(app):
    print("[run_send_weather] –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏")
    class DummyContext:
        def __init__(self, bot):
            self.bot = bot
    context = DummyContext(app.bot)
    print("[run_send_weather] –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    try:
        await send_weather(context)
        print("[run_send_weather] –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"[run_send_weather] –û—à–∏–±–∫–∞: {e}")
    finally:
        print("[run_send_weather] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")

def start_scheduler(app, loop):
    scheduler = BackgroundScheduler(timezone="Europe/Kiev")
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(run_send_weather(app), loop), 'cron', hour=8, minute=0)
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(run_send_weather(app), loop), 'cron', hour=20, minute=0)
    scheduler.start()

def main():
    print("=== weather_bot.py MAIN STARTED ===")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    threading.Thread(target=start_scheduler, args=(app, loop), daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —ñ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É –≤ –∫–∞–Ω–∞–ª @pogoda_veleten")
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        loop.close()

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"FATAL ERROR: {e}")
        import time
        time.sleep(60)