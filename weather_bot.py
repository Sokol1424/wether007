import os
import requests
from telegram import Bot
from telegram.ext import Application, ContextTypes
import datetime
import asyncio
import threading
from apscheduler.schedulers.background import BackgroundScheduler
import time

print("weather_bot.py —Å—Ç–∞—Ä—Ç—É–µ—Ç!")

TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')
LAT = 49.8369
LON = 36.7594
CHAT_ID = '@pogoda_veleten'  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª

def get_wind_direction_ua(deg):
    dirs = [
        '–ø—ñ–≤–Ω—ñ—á', '–ø—ñ–≤–Ω—ñ—á–Ω–∏–π —Å—Ö—ñ–¥', '—Å—Ö—ñ–¥', '–ø—ñ–≤–¥–µ–Ω–Ω–∏–π —Å—Ö—ñ–¥',
        '–ø—ñ–≤–¥–µ–Ω—å', '–ø—ñ–≤–¥–µ–Ω–Ω–∏–π –∑–∞—Ö—ñ–¥', '–∑–∞—Ö—ñ–¥', '–ø—ñ–≤–Ω—ñ—á–Ω–∏–π –∑–∞—Ö—ñ–¥'
    ]
    ix = int((deg + 22.5) // 45) % 8
    return dirs[ix]

UA_WEEKDAYS = {
    0: '–ø–Ω', 1: '–≤—Ç', 2: '—Å—Ä', 3: '—á—Ç', 4: '–ø—Ç', 5: '—Å–±', 6: '–Ω–¥'
}

UA_MONTHS = {
    1: '—Å—ñ—á–Ω—è', 2: '–ª—é—Ç–æ–≥–æ', 3: '–±–µ—Ä–µ–∑–Ω—è', 4: '–∫–≤—ñ—Ç–Ω—è', 5: '—Ç—Ä–∞–≤–Ω—è', 6: '—á–µ—Ä–≤–Ω—è',
    7: '–ª–∏–ø–Ω—è', 8: '—Å–µ—Ä–ø–Ω—è', 9: '–≤–µ—Ä–µ—Å–Ω—è', 10: '–∂–æ–≤—Ç–Ω—è', 11: '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', 12: '–≥—Ä—É–¥–Ω—è'
}

UA_WEATHER = {
    '—è—Å–Ω–æ': '‚òÄÔ∏è –Ø—Å–Ω–æ',
    '—Ö–º–∞—Ä–Ω–æ': '‚òÅÔ∏è –•–º–∞—Ä–Ω–æ',
    '–ø–æ—Ö–º—É—Ä–æ': '‚òÅÔ∏è –ü–æ—Ö–º—É—Ä–æ',
    '–º—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å': 'üå§ –ú—ñ–Ω–ª–∏–≤–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å',
    '–¥–æ—â': 'üåß –î–æ—â',
    '–Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â': 'üå¶ –ù–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â',
    '–≥—Ä–æ–∑–∞': '‚õà –ì—Ä–æ–∑–∞',
    '—Å–Ω—ñ–≥': '‚ùÑÔ∏è –°–Ω—ñ–≥',
    '—Ç—É–º–∞–Ω': 'üå´ –¢—É–º–∞–Ω',
}

def get_weather_forecast():
    url = f'https://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&appid={WEATHER_API_KEY}&units=metric&lang=ua'
    response = requests.get(url, timeout=10)
    data = response.json()
    days = {}
    for item in data['list']:
        dt = datetime.datetime.fromtimestamp(item['dt'])
        day_key = dt.date()
        weather_desc = item['weather'][0]['description'].lower()
        ua_desc = UA_WEATHER.get(weather_desc, weather_desc)
        entry = {
            'temp': item['main']['temp'],
            'wind_speed': item['wind']['speed'],
            'wind_dir': get_wind_direction_ua(item['wind']['deg']),
            'humidity': item['main']['humidity'],
            'description': ua_desc,
            'time': dt.strftime('%H:%M'),
        }
        if day_key not in days:
            days[day_key] = {'date': dt, 'night': None, 'day': None}
        if dt.hour == 3:
            days[day_key]['night'] = entry
        if dt.hour == 15:
            days[day_key]['day'] = entry
    forecast = []
    for d in sorted(days.keys()):
        if days[d]['night'] and days[d]['day']:
            forecast.append(days[d])
        if len(forecast) == 5:
            break
    return forecast

async def send_weather(context: ContextTypes.DEFAULT_TYPE):
    print("[send_weather] –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É")
    forecast = get_weather_forecast()
    msg = 'üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —É –í–µ–ª–µ—Ç–µ–Ω—ñ –Ω–∞ 5 –¥–Ω—ñ–≤\n'
    for i, day in enumerate(forecast):
        dt = day['date']
        weekday = UA_WEEKDAYS[dt.weekday()]
        month_ua = UA_MONTHS[dt.month]
        msg += f"üìÖ {dt.day} {month_ua} ({weekday})\n"
        night = day['night']
        msg += (
            f"üåô –ù—ñ—á: {night['temp']:.1f}¬∞C, {night['description']}, "
            f"–≤—ñ—Ç–µ—Ä {night['wind_speed']} –º/—Å, {night['wind_dir']}, "
            f"–≤–æ–ª–æ–≥—ñ—Å—Ç—å {night['humidity']}%\n"
        )
        daypart = day['day']
        msg += (
            f"‚òÄÔ∏è –î–µ–Ω—å: {daypart['temp']:.1f}¬∞C, {daypart['description']}, "
            f"–≤—ñ—Ç–µ—Ä {daypart['wind_speed']} –º/—Å, {daypart['wind_dir']}, "
            f"–≤–æ–ª–æ–≥—ñ—Å—Ç—å {daypart['humidity']}%\n"
        )
        if i < len(forecast) - 1:
            msg += "\n\n"
    msg += "üìç –í–µ–ª–µ—Ç–µ–Ω—å | –û–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ–¥–Ω—è\n‚òÅÔ∏è‚òÄÔ∏è –°–ª—ñ–¥–∫—É–π –∑–∞ –Ω–µ–±–æ–º ‚Äî –±—É–¥—å —É –∫—É—Ä—Å—ñ üå¶\n#–ø–æ–≥–æ–¥–∞ #–≤–µ–ª–µ—Ç–µ–Ω—å"
    try:
        print("[send_weather] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram...")
        await context.bot.send_message(chat_id=CHAT_ID, text=msg)
        print("[send_weather] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"[send_weather] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def run_send_weather(app):
    print("[run_send_weather] –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏")
    class DummyContext:
        def __init__(self, bot):
            self.bot = bot
    context = DummyContext(app.bot)
    print("[run_send_weather] –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    try:
        await send_weather(context)
        print("[run_send_weather] –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"[run_send_weather] –û—à–∏–±–∫–∞: {e}")
    finally:
        print("[run_send_weather] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")

def start_scheduler(app, loop):
    scheduler = BackgroundScheduler(timezone="Europe/Kiev")
    scheduler.add_job(lambda: asyncio.run_coroutine_threadsafe(run_send_weather(app), loop), 'interval', minutes=60)
    scheduler.start()

def main():
    print("=== weather_bot.py MAIN STARTED ===")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    threading.Thread(target=start_scheduler, args=(app, loop), daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —ñ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É –≤ –∫–∞–Ω–∞–ª @pogoda_veleten")
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        loop.close()

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"FATAL ERROR: {e}")
        import time
        time.sleep(60)